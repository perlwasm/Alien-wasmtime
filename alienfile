use alienfile;
use Path::Tiny qw( path );
use File::Which qw( which );
use Config;

configure {
  requires 'Path::Tiny';
  requires 'File::Which';
};

if($^O eq 'linux')
{
  # archname=x86_64-linux-gnu-thread-multi
  if($Config{archname} !~ /^x86_64-linux/)
  {
    print "Only x86_64 is supported.\n";
    print "If we are missing a binary tarball that could work for your platform, please comment here:\n";
    print "https://github.com/perlwasm/Alien-wasmtime/issues/2\n";
    exit;
  }

  if(which 'bash')
  {
    # call ulimit via bash in case
    # the user's shell is not bash.
    my($vm) = grep /virtual memory/, `bash -c 'ulimit -a'`;
    if(defined $vm)
    {
      chomp $vm;
      if($vm !~ /unlimited/)
      {
        log " !! WARNING !! WARNING !!";
        log " !! WARNING !! WARNING !!";
        log " ";
        log " ";
        log "You seem to have a virtual address limit set.  This can cause";
        log "problems with software like Wasmtime which use `PROT_NONE` pages";
        log "for memory OOB checks or allocation";
        log "Please see";
        log "https://github.com/perlwasm/Wasm/issues/22";
        log " ";
        log " ";
        log " !! WARNING !! WARNING !!";
        log " !! WARNING !! WARNING !!";
      }
    }
    else
    {
      log "unable to find virtual memory limit";
      log "https://github.com/perlwasm/Wasm/issues/22";
    }
  }
  else
  {
    log "unable to find bash, not checking virtual memory limits";
    log "https://github.com/perlwasm/Wasm/issues/22";
  }
}
elsif($^O eq 'MSWin32')
{
  if($Config{archname} !~ /^MSWin32-x64/)
  {
    print "Only x86_64 is supported.\n";
    print "If we are missing a binary tarball that could work for your platform, please comment here:\n";
    print "https://github.com/perlwasm/Alien-wasmtime/issues/2\n";
    exit;
  }
}
elsif($^O eq 'darwin')
{
  if($Config{myarchname} !~ /^i386-darwin/ || $Config{ptrsize} != 8)
  {
    print "Only x86_64 is supported.\n";
    print "If we are missing a binary tarball that could work for your platform, please comment here:\n";
    print "https://github.com/perlwasm/Alien-wasmtime/issues/2\n";
    exit;
  }
}
else
{
  print "Operating system not supported.\n";
  print "If we are missing a binary tarball that could work for your platform, please comment here:\n";
  print "https://github.com/perlwasm/Alien-wasmtime/issues/2\n";
  exit;
}

probe sub { 'share' };

share {

  my $version = $ENV{ALIEN_WASMTIME_VERSION} || 'v0.15.0';

  if($^O eq 'linux')
  {
    start_url "https://github.com/bytecodealliance/wasmtime/releases/download/$version/wasmtime-$version-x86_64-linux-c-api.tar.xz";
    plugin 'Download';
    plugin Extract => 'tar.xz';
  }
  elsif($^O eq 'MSWin32')
  {
    start_url "https://github.com/bytecodealliance/wasmtime/releases/download/$version/wasmtime-$version-x86_64-windows-c-api.zip";
    plugin 'Download';
    plugin Extract => 'zip';
  }
  elsif($^O eq 'darwin')
  {
    start_url "https://github.com/bytecodealliance/wasmtime/releases/download/$version/wasmtime-$version-x86_64-macos-c-api.tar.xz";
    plugin 'Download';
    plugin Extract => 'tar.xz';
  }

  plugin 'Build::Copy';

  gather sub {
    my($build) = @_;
    $build->runtime_prop->{version} = $version;
    $build->runtime_prop->{version} =~ s/^v//;
    $build->runtime_prop->{cflags}  = "-I@{[ $build->runtime_prop->{prefix} ]}/include ";
    $build->runtime_prop->{libs}    = "-L@{[ $build->runtime_prop->{prefix} ]}/lib -lwasmtime ";
  };
};


